
You are an expert in Laravel, PHP, and UI/UX desings and jquery and bootstrap 5 and axios and sweetalert2 and javascript related web development technologies.

project:
  name: JoilYaseeir
  description: >
    RFID gas‑station payment & service‑booking platform
    with web admin dashboards and customer‑facing service portal.
  uuidPrimaryKeys: true   # Enforce UUID (Str::uuid()) on all tables

technologies:
  backend: 
    - Laravel 10 (PHP 8.1+)
    - MS SQL Server (ODBC Driver 17)
  frontend:
    - Bootstrap 5.3 (no legacy v4)
    - jQuery 3.6
    - Axios for AJAX
    - Blade Components
  notifications:
    - Mail (Microsoft 365 SMTP)
    - SMS via https://authentica.sa/
  mobile: >
    (future) expose same API to React Native or Flutter

codingStandards:
  php: PSR‑12
  blade: indent 2 spaces
  js: ES6+, no globals, use modules or IIFE
  css: BEM naming

database:
  useSequences: false   # MS SQL sequence only for customer_no
  migrations:
    - use uuid primary keys
    - timestamp fields with timezone
  tables:
    statuses:
      - pending, approved, rejected
    wallet_applications
    policy_approvers
    wallet_application_approvals
    users, roles, permissions (Spatie)

features:
  authentication:
    customer:
      - OTP via SMS & email
      - mobile‑only login (readonly)
    admin:
      - email+password + OTP
  wallet:
    - every user has one wallet
    - personal: top‑up via Stripe only
    - company: top‑up via credit_card, bank_transfer, bank_lc, bank_guarantee (requires approvals)
  approvalProcess:
    flow: finance → validation → activation
    dynamic: editable via BPM UI
    notifications: email & SMS to each approver in turn
  services:
    list in DB (A, B, future ...)
    booking forms per service (fields vary)
    summary calculation (VAT + total)
  userProfile:
    - CRUD for all fields except mobile
  logs:
    - login, wallet_recharge, service_booking, profile_update
    - searchable/filterable by role & date

templates:
  projectPlanning: |
    1. Write a concise requirements doc in markdown.
    2. Sketch DB ER‑diagram with UUID PKs and FKs.
    3. Define approval workflow and roles.
  backendStructure: |
    - app/Models: Eloquent models with UUID trait.
    - app/Http/Controllers: RESTful resource controllers.
    - app/Services: business logic (ApprovalService, WalletService).
    - app/Notifications: ApprovalNotification via Mail+SMS.
    - database/migrations: one migration per table, uuid PK, timestamps.
    - routes/web.php: customer & admin routes.
    - routes/api.php: JSON API for mobile.
  apiDesign: |
    - Use API Resource classes for JSON responses.
    - Routes under /api/v1 with appropriate middleware.
    - Validate requests with FormRequests.
    - Return 422 on validation errors.
  frontendViews: |
    - resources/views/layouts/app.blade.php (master layout).
    - resources/views/auth/index.blade.php (login/register).
    - resources/views/wallet/approval-page.blade.php.
    - resources/views/bpm/approvers.blade.php.
    - Use @push('scripts') for page JS.
  forms: |
    - Use Laravel Collective or plain Blade <form>.
    - CSRF token on every form.
    - Validate on front (js) and back (FormRequest).
    - Show validation errors in-line.
  ajaxCalls: |
    - Use Axios instance with interceptors to show global loader.
    - Example:
      axios.post('/wallet/topup', data)
           .then(res => ...)
           .catch(err => showErrors(err.response.data.errors));
  mobileIntegration: |
    - Mirror API endpoints in API routes
    - Use JSON Web Tokens (sanctum or passport).
    - Document endpoints in OpenAPI.

bpmGuidelines:
  menu:
    - label: Business Process Management
      icon: fas fa-cogs
      children:
        - name: Approvers
          url: /bpm/approvers
  policyForm:
    - fields: policy_name, description
    - approver_rows: [user_select, sort_order, remove_button]
    - dynamic add/remove rows with JS

approvalPageLayout:
  sections:
    - Application Details: table of application data.
    - Approval Policies:
        component: timeline or stepper
        each step shows approver name, status, Action button if pending & current user.
    - Approval History: list of past approvals with comment & timestamp.

emailNotifications:
  whenNewApproval:
    subject: New Wallet Approval Required
    template: resources/views/emails/new_approval.blade.php
  whenApproved:
    subject: Wallet Application Approved
    template: resources/views/emails/application_approved.blade.php
  whenRejected:
    subject: Wallet Application Rejected
    template: resources/views/emails/application_rejected.blade.php

Core Principles:
  - Write concise, technical responses with accurate PHP/Laravel examples.
  - Prioritize SOLID principles for object-oriented programming and clean architecture.
  - Follow PHP and Laravel best practices, ensuring consistency and readability.
  - Design for scalability and maintainability, ensuring the system can grow with ease.
  - Prefer iteration and modularization over duplication to promote code reuse.
  - Use consistent and descriptive names for variables, methods, and classes to improve readability.

Dependencies:
  - Composer for dependency management
  - PHP 8.1+
  - Laravel 10.0+

PHP and Laravel Standards:
  - Leverage PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
  - Adhere to PSR-12 coding standards for consistent code style.
  - Always use strict typing: declare(strict_types=1);
  - Utilize Laravel's built-in features and helpers to maximize efficiency.
  - Follow Laravel's directory structure and file naming conventions.
  - Implement robust error handling and logging:
    - Use Laravel's exception handling and logging features.
    - Create custom exceptions when necessary.
    - Employ try-catch blocks for expected exceptions.
  - Use Laravel's validation features for form and request data.
  - Implement middleware for request filtering and modification.
  - Utilize Laravel's Eloquent ORM for database interactions.
  - Use Laravel's query builder for complex database operations.
  - Create proper migrations and seeders.